<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:webfeeds="http://webfeeds.org/rss/1.0">
  <channel>
    <title>shelter</title>
    <link>https://gageluna.com/zh-cn/</link>
    <description>Recent content on shelter</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sat, 10 Dec 2022 00:00:00 +0000</lastBuildDate>
    
    <atom:link href="https://gageluna.com/zh-cn/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>关于</title>
      <link>https://gageluna.com/zh-cn/about/</link>
      <pubDate>Fri, 02 Dec 2022 21:38:52 +0800</pubDate>
      
      <guid>https://gageluna.com/zh-cn/about/</guid>
      
        <description>&lt;p&gt;&lt;em&gt;&lt;strong&gt;本博客主要是记录博主的一些日常所思所想
也可以说
是在这个审查大环境下
保留一些独立思考的地方&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;无论你是因为何种原因点进来，我都欢迎
希望我的一些思考，可以给你一些新的灵感&lt;/p&gt;
&lt;p&gt;之前尝试过利用云服务器搭建博客，但是烦人的消息推送、繁琐的审查制度，使我放弃了租服务器实现博客的想法。&lt;/p&gt;
&lt;p&gt;我想，博客注重的是作者的思考，而不是那些花哨的装饰。简约、实用，是我一贯的风格，也因此，我搭建了目前的这个博客，在这里，与你相见。&lt;/p&gt;
&lt;p&gt;目前使用的是GitHub pages + Hugo架构搭建而成的，&lt;strong&gt;作为非程序员的我，确实有些许困难。如果你发现有什么问题或者值得改进的地方，请及时联系我。&lt;/strong&gt;&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>对抖音等短视频的一些看法</title>
      <link>https://gageluna.com/zh-cn/2022/12/10/%E5%AF%B9%E6%8A%96%E9%9F%B3%E7%AD%89%E7%9F%AD%E8%A7%86%E9%A2%91%E7%9A%84%E4%B8%80%E4%BA%9B%E7%9C%8B%E6%B3%95/</link>
      <pubDate>Sat, 10 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>https://gageluna.com/zh-cn/2022/12/10/%E5%AF%B9%E6%8A%96%E9%9F%B3%E7%AD%89%E7%9F%AD%E8%A7%86%E9%A2%91%E7%9A%84%E4%B8%80%E4%BA%9B%E7%9C%8B%E6%B3%95/</guid>
      
        <description>&lt;blockquote&gt;
&lt;p&gt;我们还是需要融入社会的，我想。即使我们对现状有着很多很多的不满意，不甘心，看不惯，但归根结底，我们还是需要融入这个社会，成为茫茫人海中最不起眼的那一个。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;最近，我也开始慢慢使用抖音。作为一个年轻人，不用抖音、微博、小红书这些软件，似乎显得有些孤僻。于是，我也在最近，开始慢慢使用抖音。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;说一些题外话，我一开始原本打算使用 tik tok ，看看世界人们都在干什么，但是 tik tok 有手机号检测，监测到大陆手机号就回自动锁区。无奈之下只能选择了抖音&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;写的时候想起来，似乎很久之前就写过我对于短视频软件的一些看法。不过，时代是在不断发展的，那么，从我现在的角度和使用感受，再来反思一下抖音这些短视频软件。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;相比于我过去的认知，抖音现在已经有了很大的变化。在短视频之外，有着各种各样的功能——直播、购物，甚至可以看世界杯球赛。可以看得出，抖音也想要做那种 all in one 的软件，那接下来，我就想洗谈谈我对每一部分的一些感受。&lt;/p&gt;
&lt;h2 id=&#34;抖音作为一个主打短视频软件首先关注的必然是它的短视频内容&#34;&gt;抖音作为一个主打短视频软件，首先关注的必然是它的短视频内容&lt;/h2&gt;
&lt;p&gt;就实际感受而言，抖音并不像想象的那样只是充斥着无聊的段子和各种家长里短的闹剧，也确实存在着各种各样有价值的小视频。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;比如讲解IOS 快捷指令的视频，对我来讲就显得十分有价值。&lt;/p&gt;
&lt;p&gt;一个几十秒的短视频，肯定无法讲解清楚这个快捷指令的全部，最多只会讲解如何安装并且使用这个快捷指令。&lt;/p&gt;
&lt;p&gt;对用户来说，这样确实是最好的方式——只讲解使用方式。简单、直接，用言简意赅的方式讲清楚这个东西的使用方法。用户不用去关心内部的运行原理和使用条件。&lt;/p&gt;
&lt;p&gt;就我的实际体验而言，很多东西都需要结合实际情况去具体的debug。IOS版本是否兼容，是否会调用其他应用的权限，以及是否需要重新定义相关变量，都是需要自己去考虑的。&lt;/p&gt;
&lt;p&gt;去翻看了一下评论区，大家各种各样的问题也是千奇百怪，而作者也从来都是像机器人一样回复去 xxx网站下载最新的快捷指令 ，&lt;em&gt;颇有一种网吧里网管说：电脑坏了重启的感觉&lt;/em&gt; 。&lt;/p&gt;
&lt;p&gt;可以想象，视频的作者也不过是搬运其他人分享的快捷指令，本身可能对这个快捷指令这一套的操作都不是很理解。那么想要他去回答相关的技术性问题，自然显得不可能。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;除此之外，我也看到了很多不错的搞笑视频。
但随着看过视频的增加，1个视频里10个段子有7-8个都是重复的，剩下的虽然没看过但也不是十分好笑。大量的重复视频，让本来还好笑的段子，显得十分乏味。&lt;/p&gt;
&lt;p&gt;一个视频，不感兴趣划走就行，不会占用太多时间的。或许算法是这样认为的。
但我觉得，让我去看这种重复性的东西，本身就是对我自己精神的一种折磨。确实不会使用太多的时间，但这种重复性的动作会造成我的审美疲劳，是一种精神上的疲劳。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;最令我觉得无法忍受的，其实是很多视频里面的墨迹。&lt;/p&gt;
&lt;p&gt;一个1分钟多一点的视频，开篇重复的话题就能占据40多秒。&lt;/p&gt;
&lt;p&gt;“什么是最重要xx道理，今天告诉你。“
”我们都有过xx 经历，但是为什么 xx 就能十分出色呢，今天这个视频来给你分析一下”
“最xx的十个点，第五个和第十个最好”
&amp;hellip;&amp;hellip;&lt;/p&gt;
&lt;p&gt;真的很难接受，明明一句话就讲清楚的道理，非要前面说一大推完全没有价值的话。对我来讲，这些无用的信息真的浪费我的时间和精力。更令我不满的是，最后讲的科普知识大多都是那些毫无新意的话，甚至是一些错误的科普。每当这种时候，真的让我觉得，我浪费了我本就宝贵的生命。&lt;/p&gt;
&lt;p&gt;可能在算法的评判里，一个短视频的完播率也是一项重要的考核指标。但是，在我实际的使用感受来讲，如果完播率只是促进了类似的做法——墨迹的讲话方式，那我觉得不如没有。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;抖音作为一款主打短视频的软件，就目前的使用体验而言，我很难说这部分做的真的好。它确实有着作为短视频的优势，而且种类丰富，内容量大。但是，目前抖音内的视频很多还是以模仿为主，相同的段子，听一个人讲会觉得新鲜，听两三个人讲会觉得一般，听七八个人讲就会觉得厌烦。&lt;/p&gt;
&lt;p&gt;无法摆脱雷同视频，确实成为我使用抖音的一个不可忽略的问题。&lt;/p&gt;
&lt;h2 id=&#34;在了解到它的内容之后我就开始思考它为什么会有这种形式的内容&#34;&gt;在了解到它的内容之后，我就开始思考它为什么会有这种形式的内容&lt;/h2&gt;
&lt;p&gt;当今社会的快节奏，是促成短视频，尤其是抖音这类短视频爆火的重要原因。每个人都急匆匆的上班、上学，日常生活好像已经被各种日程排的满满当当的。在这样的环境下，留给我们自己的时间其实只剩下很零碎的碎片化时间。&lt;/p&gt;
&lt;p&gt;这些碎片化时间，往往是不固定的，而且随时可能被打断。因此，一些需要深入思考和理解的东西，比如读书，无法利用这些时间。&lt;/p&gt;
&lt;p&gt;但人们又不希望这点时间什么都不做，希望利用这些碎片化的时间。短视频，这种几十秒或者1分多钟的视频，很好的利用了这些碎片化时间。&lt;/p&gt;
&lt;p&gt;时间短、内容浅，不需要消耗太多精力去理解和掌握视频中传授的内容，这些以前在长视频里面被人摒弃的点，成为了短视频的优势。&lt;/p&gt;
&lt;p&gt;忙，没时间，成为了人们选择接受短视频这种形式的最大的理由。况且，即便条件相同，人们总喜欢做最轻松最省力的工作。读一本名著和看几个段子，自然是看段子轻松。这也就养成了我们的快餐式文化。&lt;/p&gt;
&lt;h2 id=&#34;我们应该如何去接受这种快餐文化&#34;&gt;我们应该如何去接受这种快餐文化&lt;/h2&gt;
&lt;p&gt;快餐文化，已经成当下无可避免的一种趋势了。很难说这种文化是否有多么优秀或者值得借鉴，但我们无法否认这是我们所处时代的一个主流的想法。或许在若干年后会有人来否定它，但这显然不是现阶段的我们可以左右的。&lt;/p&gt;
&lt;p&gt;喜欢或者不喜欢这种文化，现阶段也需要去了解这种文化。因为我们需要融入社会，融入集体，才可以获得值得我们学习或者思考的信息。&lt;/p&gt;
&lt;p&gt;为了保持我们的独立思考，我觉得我们还是需要做到以下几点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;保持做笔记的习惯。无论是电子笔记还是纸质笔记，都可以。&lt;/p&gt;
&lt;p&gt;这主要是为了从快餐文化中吸收知识。几十秒的短视频，及时有一些比较感兴趣的知识，往往也会因为划走而消失。在我们真的需要时，我们可能只会想起我们看到过介绍，而想不起知识的核心。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;这里提一句，个人推荐使用电子笔记，尤其是带有本地备份功能的电子笔记。至少不容易丢失&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;对笔记保持不断的回顾和整理&lt;/p&gt;
&lt;p&gt;我们做的笔记，是为了记录知识而写，不是单纯的收藏夹。不断地反思，不断地思考，从而产生新的灵感或者新的思考。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;这里比较推荐参考“常青笔记”这一概念，以及尼克拉斯-卢曼的卡片盒笔记法&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;拥有乐观的心态&lt;/p&gt;
&lt;p&gt;无论你是否喜欢目前的快餐文化，都应当以积极乐观的方式去接纳，取长补短。或许会不符合心意，不过每一次新的尝试都会有不一样的收获。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</description>
      
    </item>
    
    <item>
      <title>认知的壁垒</title>
      <link>https://gageluna.com/zh-cn/2022/12/04/%E8%AE%A4%E7%9F%A5%E7%9A%84%E5%A3%81%E5%9E%92/</link>
      <pubDate>Sun, 04 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>https://gageluna.com/zh-cn/2022/12/04/%E8%AE%A4%E7%9F%A5%E7%9A%84%E5%A3%81%E5%9E%92/</guid>
      
        <description>&lt;p&gt;*最近一件事精启发了我：长久以来我都习惯了安卓蓝牙耳机的切换——先取消当前的配对，再在新设备上建立配对，一直以来都是这样，也从未想过这样有什么不方便的问题。但当我切换到iPhone时，我发现可以不需要这么麻烦，换个设备会自动连接。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;这不禁让我开始思考，我之前为什么会没有关注过这种连接复杂性的问题，不是做不到的无能为力，而是完全没有意识到这是一个问题。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;究竟是什么影响了我的认知我觉得应该有以下两方面的原因&#34;&gt;究竟是什么影响了我的认知，我觉得应该有以下两方面的原因：&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;首当其冲的，应该是行为。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我们不可能有超过我们行为的认知，我们的思考都是建立在我们行为的基础上去进一步加深。如果在一开始我们就没有类似的行为充当基础，我们就无法有更进一步的认知。&lt;/p&gt;
&lt;p&gt;就像井底之蛙一样，如果它不选择跳出困住自己的井，它无法去想象世界的美丽与壮阔，它觉得世界只存在于井的这一方天地之中。&lt;/p&gt;
&lt;p&gt;对我来讲也一样，我从来没有过使用 iPhone连接AirPods的行为，我无法知道还有这么方便快捷的连接方式。我没有合理的渠道去进行尝试或者验证。我只能想象——想象大家都是一样的，长按几秒清除连接，再等新设备连接。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;另外，环境也是一个重要因素。&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们所在的环境，其实在一定程度上决定我们会怎么样。它是一种潜移默化的、无形的力量，在不知不觉间改变着我们的认知。&lt;/p&gt;
&lt;p&gt;井底之蛙的那只蛙，如果周围有其他的青蛙，在不断着向上蹦，或者有上去的，在诉说着井外这片世界的美好。那只井底之蛙，也不可能会一直枯坐在井中，没有向上的动力了。&lt;/p&gt;
&lt;p&gt;我周围的很多人，都是在用着安卓，或者只用iPhone。很少有我能接触到的人，在同时用着iPhone以及其他的IOS设备。我很难从周围的环境中，得到关于IOS全家桶有什么实实在在的优点。&lt;/p&gt;
&lt;h2 id=&#34;由此及彼我不禁开始反思是否生活中的一些东西也让我会产生类似的问题&#34;&gt;由此及彼，我不禁开始反思，是否生活中的一些东西，也让我会产生类似的问题。&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;我首先想到了我们常说的PUA。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在现代的解释里，PUA已经成为了一种类似于通过心理、情感等方面对某人进行打压或者诈骗的词。在职场中、网络上，经常可以看到如此的词汇：“你被PUA了”。&lt;/p&gt;
&lt;p&gt;为什么这个词在近几年才开始流行起开？我觉得很大程度上是环境的问题。&lt;/p&gt;
&lt;p&gt;在这个词出来之前，面对老板的画饼，大部分打工人都会选择默默承受，选择用自己的时间和精力去实现公司做大做强的愿景。即使最后没有老板实现他所说的种种，我们也只能选择接受。&lt;/p&gt;
&lt;p&gt;随着web2.0的不断发展，自媒体成为了很重要的一个信息沟通渠道，每个人都可以成为了信息发布的源头。人们在互相比对和反思自身的过程中，发现老板的许诺存在着很多的不合理之处。这种时候，我们才会意识到自己被PUA了。&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;薪资倒挂现象，其实也是这种认知壁垒的一个体现。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;正是因为对自己所付出的辛劳，以及对自己在社会上价值认识的不足，才会不断出现老员工薪资比新员工还低很多的现象。&lt;/p&gt;
&lt;p&gt;这正是因为行为决定了我们的认知范围，没有去市场上重新评估自己价值的机会，就无法在和公司的利益谈判之中获得更多的利益。&lt;/p&gt;
&lt;p&gt;公司要求每个人的薪资保密，其实就是为了加强这种薪资壁垒。老员工没有去这个市场上看自己价值的机会，同时丧失了从其他人得知自己在市场上价值的渠道，不可避免会陷入薪资倒挂的这种情况之中。&lt;/p&gt;
&lt;h2 id=&#34;在已知我们存在认知壁垒的前提下我们如何去做&#34;&gt;在已知我们存在认知壁垒的前提下，我们如何去做&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;去发现各种新鲜的、未曾认知的事情。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这就要求我们不断的走出自己的舒适区，不断探索自己尚且陌生的环境。在这种状态下，我们不可避免地会遭受挫折，遭遇失败，遇到各种意想不到的突发情况。&lt;/p&gt;
&lt;p&gt;每当这种时候，我们会想念我们温馨的舒适圈，会产生后退的想法，这很正常。但我们也要相信，正是因为我们的不断尝试，我们才能有各种新的感受、新的想法。&lt;/p&gt;
&lt;p&gt;我很难说我的种种尝试最后获得了什么成功。&lt;/p&gt;
&lt;p&gt;但此时此刻，就如同我使用obsidian编写这篇文章一样，这就是一种新的尝试。我在这种尝试过程中，学会了markdown，学会了GitHub pages，简单知道了Hugo的用法，这对我来说就是收获。&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;我们无法去改变环境，但我们可以选择适合我们的环境。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;作为一个个体，无论是公司的职员还是小区的住户，其实我们并没有能力去改表我们周围的别人。如果在我们有能力的情况下，我们可以去追求一个更加适合我们，更加激发我们探索能力的地方。&lt;/p&gt;
&lt;p&gt;当然，我觉得去追求适合我们的环境是一件十分困难的事情，因为无论是从公司离职，还是从小区搬出去，都会需要很大的精力和很强的毅力。同时，新环境是否适应自己也是值得商榷的。&lt;/p&gt;
&lt;h2 id=&#34;最后我衷心的希望无论你是通过什么方式读到这篇文章请在各种事情上多加自己的思考不断发现新的事情不断打破自己的认知壁垒&#34;&gt;最后，我衷心的希望，无论你是通过什么方式读到这篇文章。请在各种事情上多加自己的思考，不断发现新的事情，不断打破自己的认知壁垒。&lt;/h2&gt;
</description>
      
    </item>
    
    <item>
      <title>VIM 命令</title>
      <link>https://gageluna.com/zh-cn/2022/12/02/vim-%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Fri, 02 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>https://gageluna.com/zh-cn/2022/12/02/vim-%E5%91%BD%E4%BB%A4/</guid>
      
        <description>&lt;p&gt;==这里不列举简单基础操作，只列举一些便捷的操作==&lt;/p&gt;
&lt;h2 id=&#34;移动&#34;&gt;移动&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;S-Left&amp;gt;&lt;/code&gt; 或 &lt;code&gt;&amp;lt;C-Left&amp;gt;&lt;/code&gt; 左移一个单词&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;S-Right&amp;gt;&lt;/code&gt; 或 &lt;code&gt;&amp;lt;C-Right&amp;gt;&lt;/code&gt; 右移一个单词&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CTRL-B&lt;/code&gt; 或 &lt;code&gt;&amp;lt;Home&amp;gt;&lt;/code&gt; 命令行行首&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CTRL-E&lt;/code&gt; 或 &lt;code&gt;&amp;lt;End&amp;gt;&lt;/code&gt; 命令行行尾&lt;/li&gt;
&lt;li&gt;使用 &lt;code&gt;gj&lt;/code&gt; 和 &lt;code&gt;gk&lt;/code&gt; 命令可以只移动一个屏幕行（适用于较长的行，有回绕时候）
&lt;ul&gt;
&lt;li&gt;可以使用&lt;code&gt;:map &amp;lt;Up&amp;gt; gk&lt;/code&gt;，&lt;code&gt; :map &amp;lt;Down&amp;gt; gj&lt;/code&gt; 在vimrc中定义&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;删除&#34;&gt;删除&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;CTRL-W&lt;/code&gt; 删除光标前整个单词&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CTRL-U&lt;/code&gt;  删除命令行上全部文字&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;切换&#34;&gt;切换&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;单独文件切换
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;CTRL-Z&lt;/code&gt;退出挂起vim+&lt;code&gt;fg&lt;/code&gt;返回vim&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:!{command}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;使用&lt;code&gt;：mark&lt;/code&gt; 查看所有的标记指向何处，用 &lt;code&gt;’0&lt;/code&gt; 至&lt;code&gt;’9&lt;/code&gt; 切换不同的工作。&lt;/li&gt;
&lt;li&gt;使用&lt;code&gt;：oldfiles&lt;/code&gt; 查看最近编辑过的文件，
&lt;ul&gt;
&lt;li&gt;使用&lt;code&gt;:e #&amp;lt;2&lt;/code&gt;打开第2个文件或者&lt;code&gt;:split #&amp;lt;3&lt;/code&gt;分割窗口打开第3个文件&lt;/li&gt;
&lt;li&gt;便捷操作：使用&lt;code&gt;:browse oldfiles&lt;/code&gt; 显示所有文件，按q停止，输入数字+&amp;lt;Enter&amp;gt; 进行文件&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;使用&lt;code&gt;:wviminfo&lt;/code&gt; 和&lt;code&gt;:rviminfo&lt;/code&gt;保存和还原信息
&lt;ul&gt;
&lt;li&gt;example：
在第一个 Vim 里执行:
&lt;code&gt;:wviminfo! ~/tmp/viminfo&lt;/code&gt;
而在第二个 Vim 里执行:
&lt;code&gt;:rviminfo! ~/tmp/viminfo&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;储存session &lt;code&gt;:mksession vimbook.vim&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;读取session &lt;code&gt;:source vimbook.vim&lt;/code&gt; 或者 &lt;code&gt;vim -S vimbook.vim&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;多文件切换
&lt;ul&gt;
&lt;li&gt;使用&lt;code&gt;:edit .&lt;/code&gt;打开当前目录，使用&lt;code&gt;&amp;lt;enter&amp;gt;&lt;/code&gt;或者&lt;code&gt;&amp;lt;ctrl-o&amp;gt;&lt;/code&gt;前进或后退，可以打开对应文件&lt;/li&gt;
&lt;li&gt;光标移动到需要打开的文件上，使用&lt;code&gt;gf&lt;/code&gt;打开当前文件中存在的其他文件。
&lt;ul&gt;
&lt;li&gt;如果存在路径需要修改的问题，使用&lt;code&gt;:set path+=&lt;/code&gt;增加目录。如果没有，vim会以当前目录所在目录为起点，进行搜索（支持绝对路径和相对路径）&lt;/li&gt;
&lt;li&gt;可以使用&lt;code&gt;&amp;lt;ctrl-o&amp;gt;&lt;/code&gt;返回&lt;/li&gt;
&lt;li&gt;使用&lt;code&gt;:find &amp;lt;filename&amp;gt;&lt;/code&gt;可以实现同样功能，针对于文件中没有想要寻找的文件名称&lt;/li&gt;
&lt;li&gt;如果需要在新窗口打开对应文件，使用&lt;code&gt;&amp;lt;ctrl-w&amp;gt; f&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;对应的&lt;code&gt;:find&lt;/code&gt;命令使用&lt;code&gt;:sfind&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;多个窗口时候，使用&lt;code&gt;&amp;lt;ctrl-w&amp;gt;&lt;/code&gt;进行切换&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;缓冲区（buffer）
&lt;ul&gt;
&lt;li&gt;使用&lt;code&gt;:buffers&lt;/code&gt;查看所有的buffer&lt;/li&gt;
&lt;li&gt;使用&lt;code&gt;:buffer 2&lt;/code&gt;打开相应的缓冲区&lt;/li&gt;
&lt;li&gt;可以使用&lt;code&gt;:buffer &amp;lt;filename&amp;gt;&lt;/code&gt;，用文件名或者部分文件名打开buffer&lt;/li&gt;
&lt;li&gt;使用&lt;code&gt;:sbuffer 3&lt;/code&gt;在新窗口打开缓冲区&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:bnext&lt;/code&gt; 编辑下一个缓冲区&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:bprevious&lt;/code&gt; 编辑前一个缓冲区&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:bfirst&lt;/code&gt; 编辑第一个缓冲区&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:blast&lt;/code&gt; 编辑最后一个缓冲区&lt;/li&gt;
&lt;li&gt;buffer前标志：
&lt;ul&gt;
&lt;li&gt;\u 列表外缓冲区 unlisted-buffer 。&lt;/li&gt;
&lt;li&gt;% 当前缓冲区。&lt;/li&gt;
&lt;li&gt;# 轮换缓冲区。&lt;/li&gt;
&lt;li&gt;\a 激活缓冲区，缓冲区被加载且显示。&lt;/li&gt;
&lt;li&gt;\h 隐藏缓冲区，缓冲区被加载但不显示。&lt;/li&gt;
&lt;li&gt;= 只读缓冲区。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;窗口&#34;&gt;窗口&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;分割&lt;code&gt;:split&lt;/code&gt; （默认是竖直分割）
&lt;ul&gt;
&lt;li&gt;垂直分割：&lt;code&gt;:vsplit&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;跳转
&lt;code&gt;CTRL-W h&lt;/code&gt; 跳转到左边的窗口
&lt;code&gt;CTRL-W j&lt;/code&gt; 跳转到下面的窗口
&lt;code&gt;CTRL-W k&lt;/code&gt; 跳转到上面的窗口
&lt;code&gt;CTRL-W l&lt;/code&gt; 跳转到右边的窗口
&lt;code&gt;CTRL-W t&lt;/code&gt; 跳转到最顶上的窗口
&lt;code&gt;CTRL-W b&lt;/code&gt; 跳转到最底下的窗口&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;编辑&#34;&gt;编辑&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;使用&lt;code&gt;CTRL-P&lt;/code&gt;，vim会自动执行补全操作
&lt;ul&gt;
&lt;li&gt;使用&lt;code&gt;CTRL-P&lt;/code&gt;和&lt;code&gt;CTRL-N&lt;/code&gt;进行选择。&lt;code&gt;CTRL-N&lt;/code&gt; 意为下一个匹配，而 &lt;code&gt;CTRL-P&lt;/code&gt; 意为前一个匹配。&lt;/li&gt;
&lt;li&gt;补全匹配和&lt;code&gt;:set ignorecase&lt;/code&gt;相关&lt;/li&gt;
&lt;li&gt;补全明确类型的文本
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;CTRL-X&lt;/code&gt; &lt;code&gt;CTRL-F&lt;/code&gt; 文件名&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CTRL-X&lt;/code&gt; &lt;code&gt;CTRL-L&lt;/code&gt; 整行&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CTRL-X&lt;/code&gt; &lt;code&gt;CTRL-D&lt;/code&gt; 宏定义 (包括包含文件里的)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CTRL-X&lt;/code&gt; &lt;code&gt;CTRL-I&lt;/code&gt; 当前文件以及所包含的文件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CTRL-X&lt;/code&gt; &lt;code&gt;CTRL-K&lt;/code&gt; 字典文件内的单词&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CTRL-X&lt;/code&gt; &lt;code&gt;CTRL-T&lt;/code&gt; 同义词词典文件内的单词&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CTRL-X&lt;/code&gt; &lt;code&gt;CTRL-]&lt;/code&gt; 标签&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CTRL-X&lt;/code&gt; &lt;code&gt;CTRL-V&lt;/code&gt; Vim 命令行&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;使用&lt;code&gt;CTRL-A&lt;/code&gt;，vim执行重复输入（输入你上次在insert模式下输入的文本）
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;CTRL-@&lt;/code&gt; 命令会完成 &lt;code&gt;CTRL-A&lt;/code&gt; 的操作后退出插入模式&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;使用&lt;code&gt;:iabbrev&lt;/code&gt;命令来进行缩写
&lt;ul&gt;
&lt;li&gt;example：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;:iabbrev ad advertisement&lt;/code&gt;只有在输入 ad 时候会被扩展成advertisement，输入add无影响&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:iabbrev #b /**************************************** &lt;/code&gt;:iabbrev #e &lt;!-- raw HTML omitted --&gt;********************************/`
&lt;strong&gt;可以作为输入注释的方式&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;：iab&lt;/code&gt;等同于&lt;code&gt;:iabbrev&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;该功能还可用来修正打字错误，把容易打错的字扩展成正确的字&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:abbreviate&lt;/code&gt;列出所有缩写&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:unabbreviate&lt;/code&gt;删除缩写
&lt;ul&gt;
&lt;li&gt;example：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;:unabbreviate @f&lt;/code&gt;删除 f 的缩写&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:abclear&lt;/code&gt;删除全部缩写&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;防止缩写被映射，使用&lt;code&gt;:noreabbrev&lt;/code&gt;避免映射
&lt;ul&gt;
&lt;li&gt;example：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;:noreabbrev @a adder&lt;/code&gt;a的映射&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;使用&lt;code&gt;CTRL-O {command}&lt;/code&gt;，在插入模式下使用任何普通模式的命令（但只能执行1个）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vimdiff&lt;/code&gt; 可以使两个文件互相比较
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;:dp&lt;/code&gt;将把文字从左边拷到右边，从而消除两边的差异。&amp;ldquo;dp&amp;rdquo; 代表 &amp;ldquo;diff put&amp;rdquo;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:do&lt;/code&gt;这把文本从左边拷到右边，从而消除差异。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;查找&#34;&gt;查找&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;:set ignorecase&lt;/code&gt; 忽略大小写
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;:set ic&lt;/code&gt;为该命令简写&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:set noignorecase&lt;/code&gt;为开启大小写&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:set ignorecase smartcase&lt;/code&gt; 如果你采用的模式里至少有一个大写字母，查找就成了大小写敏感的。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/&lt;/code&gt; 表示正向查找，&lt;code&gt;？&lt;/code&gt; 表示反向查找&lt;/li&gt;
&lt;li&gt;在查找命令中加入&lt;code&gt;/&lt;/code&gt;表示偏移
&lt;ul&gt;
&lt;li&gt;example
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;/默认/2&lt;/code&gt;，表示找到后使光标越过匹配的模式而前移两行，并停留在该行的行首。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/默认/-1&lt;/code&gt;，表示找到后使光标越过匹配的模式而回退两行，并停留在该行的行首。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;负数不要和&lt;/strong&gt;&lt;code&gt;n&lt;/code&gt; &lt;strong&gt;一起使用&lt;/strong&gt;。
&lt;ul&gt;
&lt;li&gt;example：&lt;code&gt;/const/-2&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;这个命令找到下一个单词 &amp;ldquo;const&amp;rdquo;，然后上移两行。如果你用命令 &amp;ldquo;n&amp;rdquo; 再找，Vim 就从当前位置开始，找到同一个 &amp;ldquo;const&amp;rdquo; 匹配。然后再一次在偏移的作用下，回到开始的地方。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;组成一项的方法就是在它前面加 &lt;code&gt;\(&lt;/code&gt;，后面加 &lt;code&gt;\)&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;example:&lt;code&gt;/\(ab\)*&lt;/code&gt; ,匹配ab这个整体0-n次&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;要避免匹配空字串，使用 &lt;code&gt;\+&lt;/code&gt;。这表示前面一项可以被匹配一次或多次。
&lt;ul&gt;
&lt;li&gt;example ： &lt;code&gt;/ab\+&lt;/code&gt;，匹配 &amp;ldquo;ab&amp;rdquo;、&amp;ldquo;abb&amp;rdquo;、&amp;ldquo;abbb&amp;rdquo; 等等。它不匹配后面没有跟随 &amp;ldquo;b&amp;rdquo; 的 &amp;ldquo;a&amp;rdquo;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;在一个查找模式中，&amp;ldquo;或&amp;rdquo; 运算符是 &amp;ldquo;&lt;code&gt;\|&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;example：&lt;code&gt;/end\(if\|while\|for\)&lt;/code&gt;，这个命令匹配 &amp;ldquo;endif&amp;rdquo;、&amp;ldquo;endwhile&amp;rdquo; 和 &amp;ldquo;endfor&amp;rdquo;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;为了避免匹配到一个特定的字符，在字符范围首位使用 &lt;code&gt;^&lt;/code&gt; 。这样方括号项 [] 就会匹配任何括号内不包括的字符。
&lt;ul&gt;
&lt;li&gt;example: &lt;code&gt;/&amp;quot;[^&amp;quot;]*&amp;quot;&lt;/code&gt; ，这个命令匹配 &amp;ldquo;foo&amp;rdquo; 和 &amp;ldquo;3!x&amp;rdquo;，包含双引号在内。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;预定义：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;\a&lt;/code&gt; 字母字符 等同于&lt;code&gt;[a-zA-Z]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\d&lt;/code&gt; 数位 等同于&lt;code&gt;[0-9]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\D&lt;/code&gt; 非数位 &lt;code&gt;[^0-9]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\D&lt;/code&gt; 非数位 &lt;code&gt;[^0-9]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\x&lt;/code&gt; 十六进制数位 &lt;code&gt;[0-9a-fA-F]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\X&lt;/code&gt;非十六进制数位 &lt;code&gt;[^0-9a-fA-F]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\s&lt;/code&gt;空白字符 &lt;code&gt;[ ]&lt;/code&gt; (&amp;lt;Tab&amp;gt; 和 &amp;lt;Space&amp;gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\S&lt;/code&gt; 非空白字符 &lt;code&gt;[^ ]&lt;/code&gt; (非 &amp;lt;Tab&amp;gt; 和 &amp;lt;Space&amp;gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\l&lt;/code&gt; 小写字母 &lt;code&gt;[a-z]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\L&lt;/code&gt; 非小写字母 &lt;code&gt;[^a-z]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\u&lt;/code&gt; 大写字母 &lt;code&gt;[A-Z]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\U&lt;/code&gt; 非大写字母 &lt;code&gt;[^A-Z]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\_&lt;/code&gt; 匹配一个换行符
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;\_.&lt;/code&gt; 匹配任意字符或一个换行符。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;折叠&#34;&gt;折叠&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;zf&lt;/code&gt; F-old creation (创建折叠)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;zo&lt;/code&gt; O-pen a fold (打开折叠)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;zc&lt;/code&gt; C-lose a fold (关闭折叠)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:mkview&lt;/code&gt; 保存折叠&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:loadview&lt;/code&gt; 恢复折叠&lt;/li&gt;
&lt;li&gt;可以根据 缩进、表达式、语法、标志进行折叠，具体参考UG&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;脚本&#34;&gt;脚本&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;let {变量} = {表达式}&lt;/code&gt; ，给变量赋值，此时为全局变量
&lt;ul&gt;
&lt;li&gt;使用&lt;code&gt;let s:{变量} = {表达式}&lt;/code&gt;，将变量定义为局部变量&lt;/li&gt;
&lt;li&gt;&lt;code&gt;unlet&lt;/code&gt; 删除变量&lt;/li&gt;
&lt;li&gt;如果你想在这样的字符串内使用双引号，在之前加上反斜杠即可
&lt;ul&gt;
&lt;li&gt;example：&lt;code&gt;let name = &amp;quot;\&amp;quot;peter\&amp;quot;&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;条件语句，支持 if - else if - else 结构
&lt;ul&gt;
&lt;li&gt;在比较时候出现大小写比较时，。&amp;quot;&lt;code&gt;#&lt;/code&gt;&amp;rdquo; 表示大小写敏感；&amp;quot;&lt;code&gt;?&lt;/code&gt;&amp;quot; 表示忽略大小写。
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;==?&lt;/code&gt; 比较两字符串是否相等，不计大小写。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;:if {condition}
{statements}
:else
{statements}
:endif
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;循环语句（while）
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;:continue&lt;/code&gt; 跳回 while 循环的开始；继续循环&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:break&lt;/code&gt; 跳至 &lt;code&gt;&amp;quot;:endwhile&lt;/code&gt;&amp;quot;；循环结束&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;:while {条件}
: {语句}
:endwhile
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;循环语句（for）
&lt;ul&gt;
&lt;li&gt;可以配合&lt;code&gt;range()&lt;/code&gt;函数一起使用，listexpression处添加range函数&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;:for {varname} in {listexpression}
: {commands}
:endfor
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;&amp;ldquo;&lt;code&gt;:execute&lt;/code&gt;&amp;rdquo; 命令可以执行一个表达式的结果。&lt;/li&gt;
&lt;li&gt;vim 函数（只列举会用到的）
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;get()&lt;/code&gt; 得到项目，错误索引不报错&lt;/li&gt;
&lt;li&gt;&lt;code&gt;len()&lt;/code&gt; 列表的项目总数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;insert()&lt;/code&gt; 在列表某处插入项目&lt;/li&gt;
&lt;li&gt;&lt;code&gt;add()&lt;/code&gt; 在列表后附加项目&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sort()&lt;/code&gt; 给列表排序&lt;/li&gt;
&lt;li&gt;&lt;code&gt;repeat()&lt;/code&gt; 重复列表多次&lt;/li&gt;
&lt;li&gt;&lt;code&gt;count()&lt;/code&gt; 计算字典里某值的出现次数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;line()&lt;/code&gt; 光标或位置标记所在行&lt;/li&gt;
&lt;li&gt;&lt;code&gt;search()&lt;/code&gt; 查找模式的匹配&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mkdir()&lt;/code&gt; 建立新目录&lt;/li&gt;
&lt;li&gt;&lt;code&gt;delete()&lt;/code&gt; 删除文件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rename()&lt;/code&gt; 重命名文件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;system()&lt;/code&gt; 得到字符串形式的外壳命令结果&lt;/li&gt;
&lt;li&gt;&lt;code&gt;getenv()&lt;/code&gt; 得到一个环境变量&lt;/li&gt;
&lt;li&gt;&lt;code&gt;setenv()&lt;/code&gt; 设置一个环境变量&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;自定义函数
&lt;ul&gt;
&lt;li&gt;如果要重定义一个已经存在的函数，在 &amp;ldquo;function&amp;rdquo; 命令后加上 !
&lt;ul&gt;
&lt;li&gt;example：&lt;code&gt;:function! Min(num1, num2, num3)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;:function {name}({var1}, {var2}, ...)
: {body}
:endfunction
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;&amp;ldquo;&lt;code&gt;:function&lt;/code&gt;&amp;rdquo; 命令列出所有用户自定义的函数及其参数
&lt;ul&gt;
&lt;li&gt;如果要查看该函数具体做什么，用该函数名作为 &amp;ldquo;&lt;code&gt;:function&lt;/code&gt;&amp;rdquo; 命令的参数即可&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:delfunction&lt;/code&gt;删除函数&lt;/li&gt;
&lt;li&gt;双引号字符 &lt;code&gt;&amp;quot;&lt;/code&gt; 标记注释的开始&lt;/li&gt;
&lt;li&gt;部分命令对于空格十分敏感，如无需要，不要设置空格&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;不常用但有趣的option&#34;&gt;不常用但有趣的option&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;加密：使用&lt;code&gt;vim -x &amp;lt;filename&amp;gt;&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;或者使用&lt;code&gt;set key=&lt;/code&gt;，但是key会显示在屏幕上，不建议这么使用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;打开二进制文件&lt;code&gt;vim -b datafile&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;对于部分不可显示的字符，使用&lt;code&gt;:set display=uhex&lt;/code&gt;或&lt;code&gt;:%!xxd&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
      
    </item>
    
    <item>
      <title>VIM 图示</title>
      <link>https://gageluna.com/zh-cn/2022/12/02/vim-%E5%9B%BE%E7%A4%BA/</link>
      <pubDate>Fri, 02 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>https://gageluna.com/zh-cn/2022/12/02/vim-%E5%9B%BE%E7%A4%BA/</guid>
      
        <description>&lt;p&gt;==这里不列举简单基础操作，只列举一些便捷的操作==&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>作为使用者，聊聊ios 和android</title>
      <link>https://gageluna.com/zh-cn/2022/11/29/%E4%BD%9C%E4%B8%BA%E4%BD%BF%E7%94%A8%E8%80%85%E8%81%8A%E8%81%8Aios-%E5%92%8Candroid/</link>
      <pubDate>Tue, 29 Nov 2022 16:01:23 +0800</pubDate>
      
      <guid>https://gageluna.com/zh-cn/2022/11/29/%E4%BD%9C%E4%B8%BA%E4%BD%BF%E7%94%A8%E8%80%85%E8%81%8A%E8%81%8Aios-%E5%92%8Candroid/</guid>
      
        <description>&lt;p&gt;&lt;strong&gt;最近，趁着双十一的活动，入手了iPhone，这下真的进入全面的IOS生态了。从Mac到iPad再到AirPods和iPhone，大部分的电子设备已经换成了iOS系统。本文就简单聊聊作为一个重度安卓用户迁移到IOS的一些感受。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;1-系统的封闭性&#34;&gt;1. 系统的封闭性&lt;/h2&gt;
&lt;p&gt;这里不得不提的就是微信。在全面迁移到IOS之前，其实我还是做了一些功课，对于封闭的系统、昂贵的app都有所认知，但没想到，对我来讲影响最大的是微信。&lt;/p&gt;
&lt;p&gt;作为一个安卓用户，微信是支持双开的。也就是说，微信支持安卓手机同时登录两个微信号的。我之前其实并没有太过于在意这个问题，或许确实是习惯了，所以我工作微信号是和我生活的微信号分开的。（并没有什么特别的理由，只是我司HR把之前的微信号拉到了微信群里，就把那个号作为工作号了）&lt;/p&gt;
&lt;p&gt;换到了iOS的环境，微信并没有给iOS做微信双开的授权以及配置，导致同一时间我只能登录一个微信号。加上微信电脑的登录只要一切换账号就会掉线，在初期的一段时间我其实是比较难受的（现在也没什么好的解决方法）&lt;/p&gt;
&lt;p&gt;除此之外，我还是一个Google play的用户，相较于安卓机的应用市场里app都会带着各种各样的华丽广告，我更倾向于选择简洁的小体积，很多小巧灵活的应用我都是从google play里面搜索得到。&lt;/p&gt;
&lt;p&gt;在这里我就怀念起我的via浏览器，不到1M的内存，不会带各种花里胡哨的功能，但是扩展功能极强。相较之下，IOS自带的Safari浏览器真的有一种用起来一言难尽的感觉。作为一款浏览器，它无疑是合格的，但对我来说，可配置的扩展有些少，可玩性较低。&lt;/p&gt;
&lt;p&gt;其他常见的应用，我还是从各个区的app store找了相应的平替，不得不说，app store需要来回切换账号真的很繁琐，而且各个区相同app价格不同很难受。不过这也是iOS封闭性的一种体现。&lt;/p&gt;
&lt;h2 id=&#34;2应用权限的清晰&#34;&gt;2.应用权限的清晰&lt;/h2&gt;
&lt;p&gt;这确实是IOS比安卓强的一点，或者说，更加繁琐的地方。iOS的应用很多都在申请权限时候会有询问，而且可以从后台很明显的看出来到底是哪个应用在使用什么权限。&lt;/p&gt;
&lt;p&gt;我相信安卓也有对应的设置，但是安卓的应用在使用权限（比如定位、录音），并不会有明显标识。我觉得这一点对于用户的信息安全是一种很好的保护。并不是我对我去过哪里说过什么处于保密状态，但是我要App在调用这些数据的时候给出很好的理由，至少别用我的数据去训练算法模型。&lt;/p&gt;
&lt;p&gt;不过这样也有明显的问题——输入法。如果不选择iOS自带的输入法，其他的输入法在每次复制粘贴时候都需要确认权限，而且可供IOS选择的输入法比较稀少，这一点确实是iOS系统的减分项。&lt;/p&gt;
&lt;h2 id=&#34;3ios生态的完整性&#34;&gt;3.IOS生态的完整性&lt;/h2&gt;
&lt;p&gt;我觉得这是IOS最出彩的一点了。&lt;/p&gt;
&lt;p&gt;作为安卓用户，不可避免的就是各种各样的适配性问题，但同时，并没有哪家安卓公司的产品可以样样都十分出彩。某米家的手机、某为家的平板，再配上其他厂家的蓝牙耳机，以及不知名厂家的电脑。在种种的相互匹配中，难免会出现因为其中一个升级导致交互性出现问题。&lt;/p&gt;
&lt;p&gt;对于iOS来说，平板、电脑、耳机、手机，都做的很出色。只能说最大的问题就是它的价格也同样昂贵了。在整体的iOS生态中，airdrop的互相传输、iCloud的备份、以及AirPods的多设备无延迟切换，真的带给人无可比拟的新奇体验。&lt;/p&gt;
&lt;p&gt;这其中，AirPods的无缝切换是最令我满意的。之前在安卓环境中，已经被渐渐养成了一个蓝牙耳机只能连接一台设备，如果想要切换，还需要重新放到盒中长按复位键，清除匹配，新设备再匹配。不得不说，这种操作真的很繁琐，尤其是在用电脑干一件事时突然需要用手机去干另一件事。在iOS系统中，多设备无缝切换，真的是十分便利。&lt;/p&gt;
&lt;p&gt;另外，airdrop真的解决了困扰我很久的电脑和手机同步的问题。之前总是需要各种第三方平台作为中转，加上微信、QQ还要对传输文件有各种各样的限制。但是airdrop的直接传输，真的便利。&lt;/p&gt;
&lt;h2 id=&#34;4规范的快捷方式快捷指令&#34;&gt;4.规范的快捷方式——快捷指令&lt;/h2&gt;
&lt;p&gt;iOS在封闭的系统之中，也同样提供了方便快捷的方式。通过快捷方式，可以实现多个app的联动以及一些自动化的功能——比如查询日历自动开启上班闹钟/休息闹钟。&lt;/p&gt;
&lt;p&gt;不过我研究发现，快捷指令本身也是有着一定的入门门槛。虽然网上有着很多的捷径库，但是否与IOS 当前版本匹配，以及一些相应的配置，也会让很多人望而却步。&lt;/p&gt;
&lt;p&gt;究其根本，是iOS给用户开放的一套脚本系统，主要通过函数和各种判断条件，实现快捷完成目标，有一些类似于GitHub中的CI自动化。我并没有仔细研究这一块，不过目前发现很多功能确实很好用。&lt;/p&gt;
&lt;h2 id=&#34;综上就是我对于ios的一些初步的体验感想&#34;&gt;综上，就是我对于iOS的一些初步的体验感想。&lt;/h2&gt;
&lt;p&gt;我很难说iOS能完全领先于android，在使用过程中，它也同样有着很多的毛病。加上IOS设备普遍偏贵，相较于国产低廉的android设备，IOS还是性价比较低的。但是，如果是追求一个新的体验以及无广告的环境，还是可以尝试一下IOS的生态的。&lt;/p&gt;
&lt;p&gt;***PS. 因为iOS几乎无广告，总有老年人应该用iOS的说法。这一点上，我觉得还是有待考虑，毕竟，相对于几乎完全开放的安卓系统，IOS的多账号、iCloud同步，以及自动订阅收费这些设置还是需要安卓用户适应。&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>节日的意义</title>
      <link>https://gageluna.com/zh-cn/2022/11/27/%E8%8A%82%E6%97%A5%E7%9A%84%E6%84%8F%E4%B9%89/</link>
      <pubDate>Sun, 27 Nov 2022 16:01:23 +0800</pubDate>
      
      <guid>https://gageluna.com/zh-cn/2022/11/27/%E8%8A%82%E6%97%A5%E7%9A%84%E6%84%8F%E4%B9%89/</guid>
      
        <description>&lt;p&gt;&lt;em&gt;曾几何时，“双十一”成为了购物节，淘宝、京东、甚至各路大大小小的平台，都在做着双十一的活动。那么，现在看来，这样的购物节真的有实际意义吗？&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;在我看来，是没有的。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;它已经失去了降价购物的那种对消费者的驱动力，人们已经发现想要购买的东西都是先涨价再降价，而且各路平台的优惠力度对个人而言着实有限。加上淘宝等平台对于活动的参加愈发复杂，从最开始的满减，到现在需要提前1个月左右的时间就要参与各种活动。参与优惠的时间成本和带来回报的不匹配，成为了越来越多的人不选择参加活动的主要原因。&lt;/p&gt;
&lt;p&gt;光棍节，本来就是一个人造的概念，如今起源已经无法追查。但各路购物网站，却成功地运用这个概念，将其包装成一个不折不扣的购物狂欢节。&lt;/p&gt;
&lt;p&gt;是否可以进一步思考，人们对于节日的认知其实和节日是否具有历史意义并没有的实际关系。换句话说，人们只会认可网络上兴盛的话题，对于一些真实的历史并不会过分地在意。&lt;/p&gt;
&lt;p&gt;历史是无法改变的客观存在，但是如果人们不对其深究，它就变成了一个象征性的存在，无法充分发挥它的参考价值。&lt;/p&gt;
&lt;p&gt;举个简单的例子：五一劳动节，是为了庆祝工人们终于取得了八小时工作日而存在的，它的诞生经过了众多的血泪抗争，但现在，只不过成为了打工人休息几天的假期罢了。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“人类从历史学到的唯一的教训，就是人类没有从历史中吸取任何教训”。——黑格尔&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;那我们平常所庆祝的各种节日，它们真的有现实意义吗？我们是真的因为历史而去记住了这些节日，还只是因为简简单单的休息而记住了这些节日。我们源远流长的历史文化传承，难道不过是因为一些休息日？&lt;/p&gt;
&lt;p&gt;有些可笑，却又有些真实。我们在庆祝着节日，在给我们的孩子传授着我们的传统，而实际上比不过几个休息日重要，比不上一些人造的购物节日重要。&lt;/p&gt;
&lt;p&gt;不禁思考，我们真的从我们习以为傲的传统文化中学到了什么呢？从小就被告诫着中华文化五千年的传统源远流长，但我们从这份源远流长中学到了什么呢？尊老爱幼？知书达理？重阳节的概念已经许久没有提起了，种种冲突事情也常常发生。我们到底学了什么呢？&lt;/p&gt;
&lt;p&gt;节日的意义——历史意义？现实意义？我觉得都不是，节日的意义，不过是休息日罢了。&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>测试新分类</title>
      <link>https://gageluna.com/zh-cn/2022/11/25/%E6%B5%8B%E8%AF%95%E6%96%B0%E5%88%86%E7%B1%BB/</link>
      <pubDate>Fri, 25 Nov 2022 16:01:23 +0800</pubDate>
      
      <guid>https://gageluna.com/zh-cn/2022/11/25/%E6%B5%8B%E8%AF%95%E6%96%B0%E5%88%86%E7%B1%BB/</guid>
      
        <description>&lt;p&gt;总归还是需要留个文件在这里作为备用的&lt;/p&gt;
&lt;p&gt;该文章只是用来测试&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>测试项目</title>
      <link>https://gageluna.com/zh-cn/2022/11/25/%E6%B5%8B%E8%AF%95%E9%A1%B9%E7%9B%AE/</link>
      <pubDate>Fri, 25 Nov 2022 16:01:23 +0800</pubDate>
      
      <guid>https://gageluna.com/zh-cn/2022/11/25/%E6%B5%8B%E8%AF%95%E9%A1%B9%E7%9B%AE/</guid>
      
        <description>&lt;p&gt;总归还是需要留个文件在这里作为备用的&lt;/p&gt;
&lt;p&gt;该文章只是用来测试&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>测试图片</title>
      <link>https://gageluna.com/zh-cn/2018/03/05/%E6%B5%8B%E8%AF%95%E5%9B%BE%E7%89%87/</link>
      <pubDate>Mon, 05 Mar 2018 16:01:23 +0800</pubDate>
      
      <guid>https://gageluna.com/zh-cn/2018/03/05/%E6%B5%8B%E8%AF%95%E5%9B%BE%E7%89%87/</guid>
      
        <description>&lt;p&gt;欢迎来到镓锗的博客&lt;/p&gt;
</description>
      
    </item>
    
  </channel>
</rss>
