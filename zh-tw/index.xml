<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:webfeeds="http://webfeeds.org/rss/1.0">
  <channel>
    <title>shelter</title>
    <link>https://gageluna.com/zh-tw/</link>
    <description>Recent content on shelter</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-tw</language>
    <lastBuildDate>Tue, 29 Nov 2022 16:01:23 +0800</lastBuildDate>
    
    <atom:link href="https://gageluna.com/zh-tw/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>关于</title>
      <link>https://gageluna.com/zh-tw/about/</link>
      <pubDate>Fri, 02 Dec 2022 21:38:52 +0800</pubDate>
      
      <guid>https://gageluna.com/zh-tw/about/</guid>
      
        <description>&lt;p&gt;&lt;em&gt;&lt;strong&gt;本博客主要是记录博主的一些日常所思所想
也可以说
是在这个审查大环境下
保留一些独立思考的地方&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;无论你是因为何种原因点进来，我都欢迎
希望我的一些思考，可以给你一些新的灵感&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>作为使用者，聊聊ios 和android</title>
      <link>https://gageluna.com/zh-tw/2022/11/29/%E4%BD%9C%E4%B8%BA%E4%BD%BF%E7%94%A8%E8%80%85%E8%81%8A%E8%81%8Aios-%E5%92%8Candroid/</link>
      <pubDate>Tue, 29 Nov 2022 16:01:23 +0800</pubDate>
      
      <guid>https://gageluna.com/zh-tw/2022/11/29/%E4%BD%9C%E4%B8%BA%E4%BD%BF%E7%94%A8%E8%80%85%E8%81%8A%E8%81%8Aios-%E5%92%8Candroid/</guid>
      
        <description>&lt;p&gt;&lt;strong&gt;最近，趁着双十一的活动，入手了iPhone，这下真的进入全面的IOS生态了。从Mac到iPad再到AirPods和iPhone，大部分的电子设备已经换成了iOS系统。本文就简单聊聊作为一个重度安卓用户迁移到IOS的一些感受。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;1-系统的封闭性&#34;&gt;1. 系统的封闭性&lt;/h2&gt;
&lt;p&gt;这里不得不提的就是微信。在全面迁移到IOS之前，其实我还是做了一些功课，对于封闭的系统、昂贵的app都有所认知，但没想到，对我来讲影响最大的是微信。&lt;/p&gt;
&lt;p&gt;作为一个安卓用户，微信是支持双开的。也就是说，微信支持安卓手机同时登录两个微信号的。我之前其实并没有太过于在意这个问题，或许确实是习惯了，所以我工作微信号是和我生活的微信号分开的。（并没有什么特别的理由，只是我司HR把之前的微信号拉到了微信群里，就把那个号作为工作号了）&lt;/p&gt;
&lt;p&gt;换到了iOS的环境，微信并没有给iOS做微信双开的授权以及配置，导致同一时间我只能登录一个微信号。加上微信电脑的登录只要一切换账号就会掉线，在初期的一段时间我其实是比较难受的（现在也没什么好的解决方法）&lt;/p&gt;
&lt;p&gt;除此之外，我还是一个Google play的用户，相较于安卓机的应用市场里app都会带着各种各样的华丽广告，我更倾向于选择简洁的小体积，很多小巧灵活的应用我都是从google play里面搜索得到。&lt;/p&gt;
&lt;p&gt;在这里我就怀念起我的via浏览器，不到1M的内存，不会带各种花里胡哨的功能，但是扩展功能极强。相较之下，IOS自带的Safari浏览器真的有一种用起来一言难尽的感觉。作为一款浏览器，它无疑是合格的，但对我来说，可配置的扩展有些少，可玩性较低。&lt;/p&gt;
&lt;p&gt;其他常见的应用，我还是从各个区的app store找了相应的平替，不得不说，app store需要来回切换账号真的很繁琐，而且各个区相同app价格不同很难受。不过这也是iOS封闭性的一种体现。&lt;/p&gt;
&lt;h2 id=&#34;2应用权限的清晰&#34;&gt;2.应用权限的清晰&lt;/h2&gt;
&lt;p&gt;这确实是IOS比安卓强的一点，或者说，更加繁琐的地方。iOS的应用很多都在申请权限时候会有询问，而且可以从后台很明显的看出来到底是哪个应用在使用什么权限。&lt;/p&gt;
&lt;p&gt;我相信安卓也有对应的设置，但是安卓的应用在使用权限（比如定位、录音），并不会有明显标识。我觉得这一点对于用户的信息安全是一种很好的保护。并不是我对我去过哪里说过什么处于保密状态，但是我要App在调用这些数据的时候给出很好的理由，至少别用我的数据去训练算法模型。&lt;/p&gt;
&lt;p&gt;不过这样也有明显的问题——输入法。如果不选择iOS自带的输入法，其他的输入法在每次复制粘贴时候都需要确认权限，而且可供IOS选择的输入法比较稀少，这一点确实是iOS系统的减分项。&lt;/p&gt;
&lt;h2 id=&#34;3ios生态的完整性&#34;&gt;3.IOS生态的完整性&lt;/h2&gt;
&lt;p&gt;我觉得这是IOS最出彩的一点了。&lt;/p&gt;
&lt;p&gt;作为安卓用户，不可避免的就是各种各样的适配性问题，但同时，并没有哪家安卓公司的产品可以样样都十分出彩。某米家的手机、某为家的平板，再配上其他厂家的蓝牙耳机，以及不知名厂家的电脑。在种种的相互匹配中，难免会出现因为其中一个升级导致交互性出现问题。&lt;/p&gt;
&lt;p&gt;对于iOS来说，平板、电脑、耳机、手机，都做的很出色。只能说最大的问题就是它的价格也同样昂贵了。在整体的iOS生态中，airdrop的互相传输、iCloud的备份、以及AirPods的多设备无延迟切换，真的带给人无可比拟的新奇体验。&lt;/p&gt;
&lt;p&gt;这其中，AirPods的无缝切换是最令我满意的。之前在安卓环境中，已经被渐渐养成了一个蓝牙耳机只能连接一台设备，如果想要切换，还需要重新放到盒中长按复位键，清除匹配，新设备再匹配。不得不说，这种操作真的很繁琐，尤其是在用电脑干一件事时突然需要用手机去干另一件事。在iOS系统中，多设备无缝切换，真的是十分便利。&lt;/p&gt;
&lt;p&gt;另外，airdrop真的解决了困扰我很久的电脑和手机同步的问题。之前总是需要各种第三方平台作为中转，加上微信、QQ还要对传输文件有各种各样的限制。但是airdrop的直接传输，真的便利。&lt;/p&gt;
&lt;h2 id=&#34;4规范的快捷方式快捷指令&#34;&gt;4.规范的快捷方式——快捷指令&lt;/h2&gt;
&lt;p&gt;iOS在封闭的系统之中，也同样提供了方便快捷的方式。通过快捷方式，可以实现多个app的联动以及一些自动化的功能——比如查询日历自动开启上班闹钟/休息闹钟。&lt;/p&gt;
&lt;p&gt;不过我研究发现，快捷指令本身也是有着一定的入门门槛。虽然网上有着很多的捷径库，但是否与IOS 当前版本匹配，以及一些相应的配置，也会让很多人望而却步。&lt;/p&gt;
&lt;p&gt;究其根本，是iOS给用户开放的一套脚本系统，主要通过函数和各种判断条件，实现快捷完成目标，有一些类似于GitHub中的CI自动化。我并没有仔细研究这一块，不过目前发现很多功能确实很好用。&lt;/p&gt;
&lt;h2 id=&#34;综上就是我对于ios的一些初步的体验感想&#34;&gt;综上，就是我对于iOS的一些初步的体验感想。&lt;/h2&gt;
&lt;p&gt;我很难说iOS能完全领先于android，在使用过程中，它也同样有着很多的毛病。加上IOS设备普遍偏贵，相较于国产低廉的android设备，IOS还是性价比较低的。但是，如果是追求一个新的体验以及无广告的环境，还是可以尝试一下IOS的生态的。&lt;/p&gt;
&lt;p&gt;***PS. 因为iOS几乎无广告，总有老年人应该用iOS的说法。这一点上，我觉得还是有待考虑，毕竟，相对于几乎完全开放的安卓系统，IOS的多账号、iCloud同步，以及自动订阅收费这些设置还是需要安卓用户适应。&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>节日的意义</title>
      <link>https://gageluna.com/zh-tw/2022/11/27/%E8%8A%82%E6%97%A5%E7%9A%84%E6%84%8F%E4%B9%89/</link>
      <pubDate>Sun, 27 Nov 2022 16:01:23 +0800</pubDate>
      
      <guid>https://gageluna.com/zh-tw/2022/11/27/%E8%8A%82%E6%97%A5%E7%9A%84%E6%84%8F%E4%B9%89/</guid>
      
        <description>&lt;p&gt;&lt;em&gt;曾几何时，“双十一”成为了购物节，淘宝、京东、甚至各路大大小小的平台，都在做着双十一的活动。那么，现在看来，这样的购物节真的有实际意义吗？&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;在我看来，是没有的。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;它已经失去了降价购物的那种对消费者的驱动力，人们已经发现想要购买的东西都是先涨价再降价，而且各路平台的优惠力度对个人而言着实有限。加上淘宝等平台对于活动的参加愈发复杂，从最开始的满减，到现在需要提前1个月左右的时间就要参与各种活动。参与优惠的时间成本和带来回报的不匹配，成为了越来越多的人不选择参加活动的主要原因。&lt;/p&gt;
&lt;p&gt;光棍节，本来就是一个人造的概念，如今起源已经无法追查。但各路购物网站，却成功地运用这个概念，将其包装成一个不折不扣的购物狂欢节。&lt;/p&gt;
&lt;p&gt;是否可以进一步思考，人们对于节日的认知其实和节日是否具有历史意义并没有的实际关系。换句话说，人们只会认可网络上兴盛的话题，对于一些真实的历史并不会过分地在意。&lt;/p&gt;
&lt;p&gt;历史是无法改变的客观存在，但是如果人们不对其深究，它就变成了一个象征性的存在，无法充分发挥它的参考价值。&lt;/p&gt;
&lt;p&gt;举个简单的例子：五一劳动节，是为了庆祝工人们终于取得了八小时工作日而存在的，它的诞生经过了众多的血泪抗争，但现在，只不过成为了打工人休息几天的假期罢了。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“人类从历史学到的唯一的教训，就是人类没有从历史中吸取任何教训”。——黑格尔&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;那我们平常所庆祝的各种节日，它们真的有现实意义吗？我们是真的因为历史而去记住了这些节日，还只是因为简简单单的休息而记住了这些节日。我们源远流长的历史文化传承，难道不过是因为一些休息日？&lt;/p&gt;
&lt;p&gt;有些可笑，却又有些真实。我们在庆祝着节日，在给我们的孩子传授着我们的传统，而实际上比不过几个休息日重要，比不上一些人造的购物节日重要。&lt;/p&gt;
&lt;p&gt;不禁思考，我们真的从我们习以为傲的传统文化中学到了什么呢？从小就被告诫着中华文化五千年的传统源远流长，但我们从这份源远流长中学到了什么呢？尊老爱幼？知书达理？重阳节的概念已经许久没有提起了，种种冲突事情也常常发生。我们到底学了什么呢？&lt;/p&gt;
&lt;p&gt;节日的意义——历史意义？现实意义？我觉得都不是，节日的意义，不过是休息日罢了。&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>测试新分类</title>
      <link>https://gageluna.com/zh-tw/2022/11/25/%E6%B5%8B%E8%AF%95%E6%96%B0%E5%88%86%E7%B1%BB/</link>
      <pubDate>Fri, 25 Nov 2022 16:01:23 +0800</pubDate>
      
      <guid>https://gageluna.com/zh-tw/2022/11/25/%E6%B5%8B%E8%AF%95%E6%96%B0%E5%88%86%E7%B1%BB/</guid>
      
        <description>&lt;p&gt;总归还是需要留个文件在这里作为备用的&lt;/p&gt;
&lt;p&gt;该文章只是用来测试&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>测试项目</title>
      <link>https://gageluna.com/zh-tw/2022/11/25/%E6%B5%8B%E8%AF%95%E9%A1%B9%E7%9B%AE/</link>
      <pubDate>Fri, 25 Nov 2022 16:01:23 +0800</pubDate>
      
      <guid>https://gageluna.com/zh-tw/2022/11/25/%E6%B5%8B%E8%AF%95%E9%A1%B9%E7%9B%AE/</guid>
      
        <description>&lt;p&gt;总归还是需要留个文件在这里作为备用的&lt;/p&gt;
&lt;p&gt;该文章只是用来测试&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>测试图片</title>
      <link>https://gageluna.com/zh-tw/2018/03/05/%E6%B5%8B%E8%AF%95%E5%9B%BE%E7%89%87/</link>
      <pubDate>Mon, 05 Mar 2018 16:01:23 +0800</pubDate>
      
      <guid>https://gageluna.com/zh-tw/2018/03/05/%E6%B5%8B%E8%AF%95%E5%9B%BE%E7%89%87/</guid>
      
        <description>&lt;p&gt;欢迎来到镓锗的博客&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title></title>
      <link>https://gageluna.com/zh-tw/1/01/01/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gageluna.com/zh-tw/1/01/01/</guid>
      
        <description>&lt;p&gt;&lt;code&gt;alias [&amp;lt;name&amp;gt; &amp;lt;command&amp;gt;]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;name&lt;/code&gt;
This argument specifies the alias name.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;command&lt;/code&gt;
This argument specifies the alias name for the UCLI command.&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title></title>
      <link>https://gageluna.com/zh-tw/1/01/01/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gageluna.com/zh-tw/1/01/01/</guid>
      
        <description>&lt;blockquote&gt;
&lt;p&gt;For bit_select, Verilog uses [&amp;lt;index&amp;gt;], while VHDL uses
(&amp;lt;index&amp;gt;). VCS MX allows both ways to specify index or bit select
for a Verilog or VHDL object. Note index must be a locally static
expression.&lt;/p&gt;
&lt;p&gt;Example :
vlObj[0], vlObj(0), vhObj(0), vhObj[0]&lt;/p&gt;
&lt;/blockquote&gt;
</description>
      
    </item>
    
    <item>
      <title></title>
      <link>https://gageluna.com/zh-tw/1/01/01/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gageluna.com/zh-tw/1/01/01/</guid>
      
        <description>&lt;p&gt;调用verilog或system Verilog 函数(或task)&lt;/p&gt;
&lt;h2 id=&#34;用法&#34;&gt;用法：&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;call {cmd(...)}&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;注意&#34;&gt;注意：&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;必须在编译过程中使用这些option 之一:  -debug_pp, -debug, or -debug_all&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;该命令不会增加仿真时间，因此如果调用有延迟的任务，延迟元素之后的部分将不会实现&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;{ } 最好加上，同时需要注意，$在tcl中仅作为变量使用&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</description>
      
    </item>
    
    <item>
      <title></title>
      <link>https://gageluna.com/zh-tw/1/01/01/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gageluna.com/zh-tw/1/01/01/</guid>
      
        <description>&lt;h3 id=&#34;command-file-写法&#34;&gt;command file 写法&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;synopsys::alias   alias_name   UCLI_command_name&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;***其中，alias_name 为自定义的名字，UCLI_command_name为原来名字&lt;/p&gt;
&lt;p&gt;示例：
&lt;code&gt;synopsys::alias fetch synopsys::get&lt;/code&gt;
&lt;code&gt;synopsys::alias run_again synopsys::restart&lt;/code&gt;&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title></title>
      <link>https://gageluna.com/zh-tw/1/01/01/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gageluna.com/zh-tw/1/01/01/</guid>
      
        <description>&lt;h2 id=&#34;常用&#34;&gt;常用：&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;CTRL+A&lt;/code&gt;  返回行首
&lt;code&gt;CTRL+E&lt;/code&gt;  返回行尾
&lt;code&gt;CTRL+L&lt;/code&gt;  清空屏幕&lt;/p&gt;
&lt;h2 id=&#34;原文&#34;&gt;原文：&lt;/h2&gt;
&lt;p&gt;You can use the up and down arrow keys to access previously
entered commands in UCLI. You can also edit the command-line
entries using the &lt;code&gt;&amp;lt;ctrl&amp;gt; -character&lt;/code&gt;.
• {&lt;code&gt;CTRL+@&lt;/code&gt;, &amp;ldquo;Mark cursor position&amp;rdquo;},
• {&lt;code&gt;CTRL+A&lt;/code&gt;, &amp;ldquo;Go to beginning of line&amp;rdquo;},
• {&lt;code&gt;CTRL+B&lt;/code&gt;, &amp;ldquo;Move backward a character&amp;rdquo;},
• {&lt;code&gt;CTRL+C&lt;/code&gt;, &amp;ldquo;Sends interrupt to the simulator&amp;rdquo;},
• {&lt;code&gt;CTRL+D&lt;/code&gt;, &amp;ldquo;Delete the character underneath the cursor&amp;rdquo;},
• {&lt;code&gt;CTRL+E&lt;/code&gt;, &amp;ldquo;Move to the end of the line&amp;rdquo;},
• {&lt;code&gt;CTRL+F&lt;/code&gt;, &amp;ldquo;Move forward a character&amp;rdquo;},
• {&lt;code&gt;CTRL+H&lt;/code&gt;, &amp;ldquo;Delete previous character&amp;rdquo;},
• {&lt;code&gt;CTRL+I&lt;/code&gt;, &amp;ldquo;Automatic completion (tab)&amp;rdquo;},
• {&lt;code&gt;CTRL+J&lt;/code&gt;, &amp;ldquo;Insert newline&amp;rdquo;},
• {&lt;code&gt;CTRL+K&lt;/code&gt;, &amp;ldquo;Kill the text from point to the end of the line&amp;rdquo;}
• {&lt;code&gt;CTRL+L&lt;/code&gt;, &amp;ldquo;Clear the screen, reprinting the current line at the
top&amp;rdquo;},
• {&lt;code&gt;CTRL+M&lt;/code&gt;, &amp;ldquo;Insert newline&amp;rdquo;},
• {&lt;code&gt;CTRL+N&lt;/code&gt;, &amp;ldquo;History next event&amp;rdquo;},
• {&lt;code&gt;CTRL+O&lt;/code&gt;, &amp;ldquo;Terminal flush&amp;rdquo;},
• {&lt;code&gt;CTRL+P&lt;/code&gt;, &amp;ldquo;History previous event&amp;rdquo;},
• {&lt;code&gt;CTRL+R&lt;/code&gt;, &amp;ldquo;Reverse incremental search&amp;rdquo;},
• {&lt;code&gt;CTRL+T&lt;/code&gt;, &amp;ldquo;Toggle last two characters&amp;rdquo;},
• {&lt;code&gt;CTRL+U&lt;/code&gt;, &amp;ldquo;Kill the current line&amp;rdquo;},
• {&lt;code&gt;CTRL+W&lt;/code&gt;, &amp;ldquo;Kill the current line&amp;rdquo;},
• {&lt;code&gt;CTRL+Y&lt;/code&gt;, &amp;ldquo;Yank the top of the kill ring into the buffer at point&amp;rdquo;},
• {&lt;code&gt;CTRL+Z&lt;/code&gt;, &amp;ldquo;Terminal suspend&amp;rdquo;},
• {&lt;code&gt;BACKSPACE&lt;/code&gt;, &amp;ldquo;Delete previous character&amp;rdquo;}&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title></title>
      <link>https://gageluna.com/zh-tw/1/01/01/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gageluna.com/zh-tw/1/01/01/</guid>
      
        <description>&lt;p&gt;==一般会使用ucli -i &amp;lt;filename&amp;gt; ，直接运行TCL脚本==&lt;/p&gt;
&lt;p&gt;==do命令是指在UCLI操作界面上，使用do &amp;lt;filename&amp;gt; ，运行TCL脚本==&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;用法：&lt;/strong&gt;
&lt;code&gt;do [-trace [on|off]] [-echo [on|off]] &amp;lt;filename&amp;gt; [&amp;lt;macro parameters&amp;gt;]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;参数：&lt;/strong&gt;
&lt;code&gt;-trace [on|off]&lt;/code&gt;
Tracing is used to display the commands being executed from the macro file.
默认为关&lt;/p&gt;
&lt;p&gt;&lt;code&gt;-echo [on|off]&lt;/code&gt;
Displays output of the evaluated command.
默认为关&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;userguide并未对两者作区分，使用示例为两者同时打开&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;macro parameters&lt;/code&gt;
主要是为了给模块传递参数的，实际中一般不写。&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title></title>
      <link>https://gageluna.com/zh-tw/1/01/01/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gageluna.com/zh-tw/1/01/01/</guid>
      
        <description>&lt;p&gt;==我们常用verdi中的gui界面看driver和load，UCLI的方法，仅作为一种了解==&lt;/p&gt;
&lt;h2 id=&#34;drivers-驱动&#34;&gt;drivers 驱动&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;drivers &amp;lt;nid&amp;gt; [-full]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;-full&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Crosses hierarchies to display the drivers of the specified signal.
By default, only drivers from the local scope are displayed.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;load-负载&#34;&gt;load 负载&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;loads &amp;lt;nid&amp;gt; [-verbose] [-local] [-stopatcell] [-stopatlib] [-nowarn]&lt;/code&gt;&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title></title>
      <link>https://gageluna.com/zh-tw/1/01/01/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gageluna.com/zh-tw/1/01/01/</guid>
      
        <description>&lt;p&gt;&lt;strong&gt;dump命令的语法极多，因此这里只记录常用的&lt;/strong&gt;
根据UCLI userguide所写，该部分内容可以参考《&lt;em&gt;Linking Novas Files with Simulators and Enabling FSDB Dumping User Guide&lt;/em&gt;》&lt;/p&gt;
&lt;p&gt;&lt;code&gt;dump [-file &amp;lt;filename&amp;gt;] [-type VPD|EVCD|FSDB] &lt;/code&gt;
这两个没有什么好解释的，放在一起写了。如果没有声明，默认时inter.vpd格式
不过，我们一般会在TCL里写 &lt;code&gt;fsdbDumpfile &amp;lt;filename&amp;gt;.fsdb &lt;/code&gt;，效果相同&lt;/p&gt;
&lt;p&gt;&lt;code&gt;dump -depth &amp;lt;levels&amp;gt; -add &amp;lt;list_of_nids&amp;gt;&lt;/code&gt;
如果没有，会dump所有信息。如果有，会dump当前层次的指定深度。
关于depth，0表示全部深度，1表示当前层，2表示当前层和下一层。
可以结合 -add 选项，增加dump其他层次的波形。
不过，我们一般会在TCL里写 &lt;code&gt;fsdbDumpvars depth &amp;quot;levels&amp;quot;&lt;/code&gt; (这里的“是必须加的”)，效果相同。&lt;/p&gt;
&lt;p&gt;==感觉这部分日后会专门去看一下上面提到的那本书，UCLI userguide中关于dump只有dump -option等选项介绍，没有dumpvars等函数的介绍==&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title></title>
      <link>https://gageluna.com/zh-tw/1/01/01/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gageluna.com/zh-tw/1/01/01/</guid>
      
        <description>&lt;h2 id=&#34;使用方法&#34;&gt;使用方法：&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;force &amp;lt;nid&amp;gt; &amp;lt;value&amp;gt;
 [&amp;lt;time&amp;gt; {, &amp;lt;value&amp;gt; &amp;lt;time&amp;gt;}* [-repeat &amp;lt;time&amp;gt;]]
 [-cancel &amp;lt;time&amp;gt;] [-freeze|-deposit] [-drive]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;**名词解释：
&lt;code&gt;-freeze&lt;/code&gt; 表明此信号不会被其他功能改写（默认）
&lt;code&gt;-deposit&lt;/code&gt; force的值可能会被改写
&lt;code&gt;-cancel &amp;lt;time&amp;gt;&lt;/code&gt;  在一段时间后撤销force这条命令（有些类似于[[release 选项]] ）&lt;/p&gt;
&lt;h2 id=&#34;限制&#34;&gt;限制：&lt;/h2&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;force on entire record is not supported.&lt;/li&gt;
&lt;li&gt;force on bit or part select is not supported.&lt;/li&gt;
&lt;li&gt;If you use force on arithmetic operand, then the result is
&amp;lsquo;X&amp;rsquo;(es).&lt;/li&gt;
&lt;li&gt;force on ports and variables of procedure and functions is not
supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;备注&#34;&gt;备注：&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;force 的value值，格式需要满足[[verilog numbering convention verilog中数字格式]]&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title></title>
      <link>https://gageluna.com/zh-tw/1/01/01/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gageluna.com/zh-tw/1/01/01/</guid>
      
        <description>&lt;h2 id=&#34;基本用法&#34;&gt;基本用法：&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;get &amp;lt;nid&amp;gt; [-radix string]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;nid：信号的层次结构&lt;/p&gt;
&lt;p&gt;-radix ：显示的格式&lt;/p&gt;
&lt;h2 id=&#34;原文&#34;&gt;原文：&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;lt;nid&amp;gt;
Nested hierarchical identifier of the signal, variable, net or reg.&lt;/p&gt;
&lt;p&gt;-radix &amp;lt;hexadecimal|binary|decimal|octal|symbolic&amp;gt;
Specifies the radix in which the values of the objects must be
displayed.&lt;/p&gt;
&lt;/blockquote&gt;
</description>
      
    </item>
    
    <item>
      <title></title>
      <link>https://gageluna.com/zh-tw/1/01/01/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gageluna.com/zh-tw/1/01/01/</guid>
      
        <description>&lt;p&gt;&lt;code&gt;help [[-text|-info|-full] &amp;lt;cmd&amp;gt;]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;-info&lt;/code&gt; 和 &lt;code&gt;-full&lt;/code&gt; 显得的比较全面，建议使用这两个option &lt;em&gt;&lt;strong&gt;（非官方建议）&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title></title>
      <link>https://gageluna.com/zh-tw/1/01/01/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gageluna.com/zh-tw/1/01/01/</guid>
      
        <description>&lt;p&gt;使用 -ucli=init，在初始化阶段使用可以调用ucli，不然只能等初始化完成后再调用ucli
***这里的初始化，主要指的是仿真 0 时刻&lt;/p&gt;
&lt;p&gt;原文：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;You can make VCS to enable UCLI debugging when initialization
begins for static SystemVerilog tasks and functions in module
definitions by using the -ucli=init runtime option and keyword
argument.&lt;/p&gt;
&lt;p&gt;This debugging capability enables you to set breakpoints during
initialization, among other things.&lt;/p&gt;
&lt;p&gt;If you omit the -init keyword argument and enter the -ucli
runtime option, then UCLI begins after initialization and you cannot
debug inside static initialization routines during initialization.&lt;/p&gt;
&lt;/blockquote&gt;
</description>
      
    </item>
    
    <item>
      <title></title>
      <link>https://gageluna.com/zh-tw/1/01/01/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gageluna.com/zh-tw/1/01/01/</guid>
      
        <description>&lt;p&gt;用法：
&lt;code&gt;memory -read|-write &amp;lt;nid&amp;gt; -file &amp;lt;fname&amp;gt; [-radix &amp;lt;radix&amp;gt;]  &lt;/code&gt;[-start start_address][-end end_address]`&lt;/p&gt;
&lt;p&gt;==&lt;strong&gt;注意：该功能只支持Verilog 的memory ！&lt;/strong&gt; ==&lt;/p&gt;
&lt;p&gt;参数：
&lt;code&gt;-read &lt;/code&gt;
从指定file读出文件，写到指定memory位置中&lt;/p&gt;
&lt;p&gt;&lt;code&gt;-write&lt;/code&gt;
从memory中读出指定的数据，写到file中。类似于Verilog函数 &lt;code&gt;$reamem&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;nid&amp;gt;&lt;/code&gt;
memory的层次(hierarchy)结构，可以用绝对或者相对路径&lt;/p&gt;
&lt;p&gt;&lt;code&gt;-radix&lt;/code&gt;
&lt;strong&gt;不支持8位！！！&lt;/strong&gt;
&lt;code&gt;&amp;lt;radix&amp;gt;&lt;/code&gt;可以支持&lt;code&gt;&amp;lt;hexadecimal | binary | decimal&amp;gt;&lt;/code&gt;&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title></title>
      <link>https://gageluna.com/zh-tw/1/01/01/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gageluna.com/zh-tw/1/01/01/</guid>
      
        <description>&lt;blockquote&gt;
&lt;p&gt;Multiple levels in a path name are separated by the character
specified in the path separator variable that can be set by the user.&lt;/p&gt;
&lt;p&gt;Allowed path separators are as follows:
&amp;ldquo;/&amp;rdquo;
&amp;ldquo;.&amp;rdquo;
&amp;ldquo;:&amp;rdquo;&lt;/p&gt;
&lt;p&gt;&amp;ldquo;.&amp;rdquo; for Verilog naming conventions.
&amp;ldquo;:&amp;rdquo; for VHDL IEEE 1076-1993 naming conventions.&lt;/p&gt;
&lt;p&gt;The default for VHDL and MX design is &amp;ldquo;/&amp;rdquo;.
The default for Verilog design is &amp;ldquo;.&amp;rdquo;.&lt;/p&gt;
&lt;/blockquote&gt;
</description>
      
    </item>
    
  </channel>
</rss>
